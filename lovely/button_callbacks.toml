[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.can_load_profile = function(e)"
position = "before"
payload = '''
G.FUNCS.check_drag_target_active = function(e)
  if e.config.args.active_check(e.config.args.card) then
    if (not e.config.pulse_border) or not e.config.args.init then
      e.config.pulse_border = true
      e.config.colour = e.config.args.colour
      e.config.args.text_colour[4] = 1
      e.config.release_func = e.config.args.release_func
    end
  else
    if (e.config.pulse_border) or not e.config.args.init  then
      e.config.pulse_border = nil
      e.config.colour = adjust_alpha(G.C.L_BLACK, 0.9)
      e.config.args.text_colour[4] = 0.5
      e.config.release_func = nil
    end
  end
  e.config.args.init = true
end
'''
match_indent = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.can_load_profile = function(e)"
position = "before"
payload = '''
G.FUNCS.can_buy_check = function(_card)
  local isCryptidMod = to_big
  if isCryptidMod then
    if to_big(_card.cost) > (to_big(G.GAME.dollars) - to_big(G.GAME.bankrupt_at)) and (to_big(_card.cost) > to_big(0)) then
      return false
    end
    return true
  end

  if _card.cost > (G.GAME.dollars - G.GAME.bankrupt_at) and (_card.cost > 0) then
    return false
  end
  return true
end

--Checks if the cost of a non voucher card is greater than what the player can afford and changes the
'''
match_indent = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.can_load_profile = function(e)"
position = "before"
payload = '''
G.FUNCS.can_buy_and_use_check = function(_card)
  local isCryptidMod = to_big
  if isCryptidMod then
    if ((to_big(_card.cost) > to_big(G.GAME.dollars) - to_big(G.GAME.bankrupt_at)) and (to_big(_card.cost) > to_big(0))) or (not _card:can_use_consumeable()) then
      return false
    end
    return true
  end

  if (((_card.cost > G.GAME.dollars - G.GAME.bankrupt_at) and (_card.cost > 0)) or (not _card:can_use_consumeable())) then
    return false
  end
  return true
end
'''
match_indent = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.OVERLAY_MENU:align_to_major()"
position = "after"
payload = '''
  G.CONTROLLER.touch_control.clear_touch = true
'''
match_indent = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.SETTINGS.paused = false"
position = "after"
payload = '''
  G.CONTROLLER.touch_control.clear_touch = true
'''
match_indent = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.can_select_card = function(e)"
position = "before"
payload = '''
  G.FUNCS.can_select_card_check = function(_card)
    if _card.ability.set ~= 'Joker' or (_card.edition and _card.edition.negative) or #G.jokers.cards < G.jokers.config.card_limit then
      return true
    end
    return false
  end
'''
match_indent = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.pack_cards and (G.pack_cards.cards[1]) and"
position = "at"
payload = '''
    if G.pack_cards and G.pack_cards.cards and (G.pack_cards.cards[1]) and
'''
match_indent = false
